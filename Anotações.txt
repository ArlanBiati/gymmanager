INICIANDO O BACK END : [

    Para configurarmos um servidor básico, precisamos setar nosso server, nossas rotas e qual a porta o servidor ira rodar.


    //--- Setamos o express como nosso server.

    const server = express()


    As rotas são escritas da seguite forma {

    
        //--- Está configuração nos tras uma rota do tipo GET, sendo a raiz do projeto (identificado com a /) e que nos apresentara uma página com o nome de INDEX.
        
        server.get('/', function(req, res){
            return res.render('index')
        })



        //--- Dentro de um servidor, o nosso request (req) é todo o conteúdo que o cliente busca e o response (res) é todo o conteúdo que o servidor envia.

    }


    //--- Esta configuração seta em qual porta o servidor ira rodar. Veja que passamos dois parametros, o primeiro é o n° da porta e o segunda é uma função de callback***.

    server.listen(5000, function() {
        console.log('Server is running!')
    })


    
    Configurando o Nunjucks - Template Engine {

    
        //--- Estamos setando para o nosso server o que o nunjucks deve identificar como template engine, que nesse caso são os arquivos  .NJK (nunjucks).

        server.set(view engine, njk)



        //--- Essa parte configura o nunjucks e pede dois parametros. O primeiro é o caminho (pasta de destino dos arquivos) e o segundo qual é o server, que nesse caso estamos usando o express.

        nunjucks.configure(views, {
            express: server           
        })



        //--- O express ira observar a pasta public que é onde se encontra nossos arquivos estaticos (JS, Imagens, CSS)

        server.use(express.static(public))

    }

    Utilizamos essa linha de código, para que o nosso server leia o body da requisição {

        server.use(express.urlencoded({ extended: true }))

    }

    *** Como o JS é uma linguagem assíncrona, o código não é lido da maneira em que foi escrito. Por isso existem as Callbacks Functions, que nada mais é funções que seram executadas após um certo evento. 
        Exemplo: Ao rodar uma API que trara dados externos para dentro da aplicação, se não houvesse callback functions, o js continuaria lendo o código sem ao menos esperar essas dados serem recebidos e isso ocasionaria vários erros !
]



CONFIGURANDO BROWSER-SYNC / NPM-RUN-ALL : [

    PARA QUE SERVE ESSAS DEPENDENCIAS : {
        Essas dependencias foram instaladas no modo desenvolvimento. Elas servem para manter o back e o front end rodando em harmonia e observando sempre que houver uma mudança em ambos.

        Com essas dependencias não temos a necessidade de ficar dando reload no server e no navegador para que as alterações sejam mostradas.

    },

    CONFIGURANDO DEPENDENCIAS : {
        Acesse o arquivo > package.json > scripts

        Dentro dos "scripts", adicione as seguintes linhas de comando nesta ordem.

            "scripts": {
        1 ->    "start": "npm-run-all -p nodemon browsersync",
        2 ->    "nodemon": "nodemon server.js",
        3 ->    "browsersync": "browser-sync start --proxy http://localhost:5000 --files 'public, views'"
            }

        1 -> Esta linha é o comando que faz nosso servidor e o front rodarem juntos (nodemon - atualiza o servidor | browsersync - atualiza o navegador)

        2 -> Estamos configurando o nodemon para sempre dar reload no nosso servidor quando houver alterações

        3 -> Estamos configurando o browser-sync para reconhecer qualquer alteração que acontecer nas pastas "public" | "views" e jogar no nosso localhost:5000 onde estamos rodando nosso servidor
         
    } 
]



CONFIGURANDO FILE SYSTEM : [

    PARA QUE SERVE O FILE SYSTEM: {
        O file system é um modo de armazenamento de arquivos que consiste em armazenar os dados em um arquivo local, ou seja, dentro da sua máquina.

        Para mais informações, achei esse blog que explica muito bem o que é e como funciona: https://helpdevs.net/2020/03/12/node-js-usando-o-modulo-fs-file-system/ 

    },

    CONFIGURANDO FS PARA GRAVAR ARQUIVOS {
        
        // Estamos configurando o fs para escrever arquivos(.writeFile). Este metódo recebe alguns parametros. {
            1 -> local onde vamos escrever o arquivo ("data.json")
            2 -> formato em que o arquivo vai ser escrito (JSON.stringfy(
                1 -> modelo de dados que sera salvo
                2 -> null
                3 -> tipo de identação utilizada no arquivo
            ))
            3 -> função de callbeck 
        }

        fs.writeFile("data.json", JSON.stringify(data, null ,2), function(err) {
            if(err) {
                return res.send("Write file error")
            }
            return res.redirect("/instructors")
        })
    }   
]    



DEPENDENCIA METHOD_OVERRIDE : [
    Está dependencia faz com que os metodos de tipo PUT e DELETE sejam implementados no formulário.

    Configurando METHOD_OVERRIDE no server : {

        // aqui estamos introduzindo o METHOD_OVERRIDE em nosso server
        const methoOverride = require("method-override")

        // configurando o server para usar o METHOD_OVERRIDE
        server.use(methoOverride("_method"))

        *** Esse midware deve ficar acima do midware de rotas, para que ele sobrescreva.
    }
]



INICIANDO COM BANCO DE DADOS SQL : [
    Para iniciarmos a conexão com o Postgres devemos instalar uma dependência chamada PG.

    Após isso criamos uma pasta com o nome de CONFIG, nela criaremos um arquivo com o nome de DB.JS que ira receber toda a parte de configuração do nosso banco de dados.

    Configurando conexão com o banco de dados através do PG : {

        // dentro do PG estamos fazendo uma desestruturação e pegando apenas o mobjeto Pool.
        // pool serve para que não precisemos enviar login / senha todas as vezes que formos fazer uma query
        const { Pool } = require("pg")


        // aqui exportamos uma pool que contem os dados que precisamos para fazer a conexão com o banco de dados.
        module.exports = new Pool({
        user: "postgres",
        password: "postgres",
        host: "172.17.0.2",
        port: "5432",
        database: "gymmanager"
        })
    }
]
INICIANDO O BACK END : [

    Para configurarmos um servidor básico, precisamos setar nosso server, nossas rotas e qual a porta o servidor ira rodar.


    //--- Setamos o express como nosso server.

    const server = express()


    As rotas são escritas da seguite forma {

    
        //--- Está configuração nos tras uma rota do tipo GET, sendo a raiz do projeto (identificado com a /) e que nos apresentara uma página com o nome de INDEX.
        
        server.get('/', function(req, res){
            return res.render('index')
        })



        //--- Dentro de um servidor, o nosso request (req) é todo o conteúdo que o cliente busca e o response (res) é todo o conteúdo que o servidor envia.

    }


    //--- Esta configuração seta em qual porta o servidor ira rodar. Veja que passamos dois parametros, o primeiro é o n° da porta e o segunda é uma função de callback***.

    server.listen(5000, function() {
        console.log('Server is running!')
    })


    
    Configurando o Nunjucks - Template Engine {

    
        //--- Estamos setando para o nosso server o que o nunjucks deve identificar como template engine, que nesse caso são os arquivos  .NJK (nunjucks).

        server.set(view engine, njk)



        //--- Essa parte configura o nunjucks e pede dois parametros. O primeiro é o caminho (pasta de destino dos arquivos) e o segundo qual é o server, que nesse caso estamos usando o express.

        nunjucks.configure(views, {
            express: server           
        })



        //--- O express ira observar a pasta public que é onde se encontra nossos arquivos estaticos (JS, Imagens, CSS)

        server.use(express.static(public))

    }

    Utilizamos essa linha de código, para que o nosso server leia o body da requisição {

        server.use(express.urlencoded({ extended: true }))

    }

*** Como o JS é uma linguagem assíncrona, o código não é lido da maneira em que foi escrito. Por isso existem as Callbacks Functions, que nada mais é funções que seram executadas após um certo evento. 
    Exemplo: Ao rodar uma API que trara dados externos para dentro da aplicação, se não houvesse callback functions, o js continuaria lendo o código sem ao menos esperar essas dados serem recebidos e isso ocasionaria vários erros !
]



CONFIGURANDO BROWSER-SYNC / NPM-RUN-ALL : [

    PARA QUE SERVER ESSAS DEPENDENCIAS : {
        Essas dependencias foram instaladas no modo desenvolvimento. Elas servem para manter o back e o front end rodando em harmonia e observando sempre que houver uma mudança em ambos.

        Com essas dependencias não temos a necessidade de ficar dando reload no server e no navegador para que as alterações sejam mostradas.

    },

    CONFIGURANDO DEPENDENCIAS : {
        Acesse o arquivo > package.json > scripts

        Dentro dos "scripts", adicione as seguintes linhas de comando nesta ordem.

            "scripts": {
                "start": "npm-run-all -p nodemon browsersync",
                "nodemon": "nodemon server.js",
                "browsersync": "browser-sync start --proxy http://localhost:5000 --files 'public, views'"
            }

        1 -> Esta linha é o comando que faz nosso servidor e o front rodarem juntos (nodemon - atualiza o servidor | browsersync - atualiza o navegador)

        2 -> Estamos configurando o nodemon para sempre dar reload no nosso servidor quando houver alterações

        3 -> Estamos configurando o browser-sync para reconhecer qualquer alteração que acontecer nas pastas "public" | "views" e jogar no nosso localhost:5000 onde estamos rodando nosso servidor
         
    } 
]

    


